name: Release

on:
  release:
    types: [published]
  # Allow manual triggering with version
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: read

jobs:
  # Run tests before publishing
  test:
    name: Run Tests
    uses: ./.github/workflows/ci.yml
    
  # Publish to Ansible Galaxy
  publish:
    name: Publish to Galaxy
    runs-on: ubuntu-latest
    needs: test
    if: always() && needs.test.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install ansible-core
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.13.9 PyYAML

      - name: Verify galaxy.yml version
        run: |
          # Extract version from galaxy.yml
          GALAXY_VERSION=$(python -c "import yaml; print(yaml.safe_load(open('galaxy.yml'))['version'])")
          echo "Galaxy.yml version: $GALAXY_VERSION"
          
          # If triggered by workflow_dispatch, check version matches
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "$GALAXY_VERSION" != "${{ inputs.version }}" ]; then
              echo "Error: galaxy.yml version ($GALAXY_VERSION) doesn't match input version (${{ inputs.version }})"
              exit 1
            fi
          fi
          
          # If triggered by release, check version matches tag
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG_VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            TAG_VERSION=${TAG_VERSION#v}
            if [ "$GALAXY_VERSION" != "$TAG_VERSION" ]; then
              echo "Error: galaxy.yml version ($GALAXY_VERSION) doesn't match release tag ($TAG_VERSION)"
              exit 1
            fi
          fi

      - name: Build collection
        run: |
          ansible-galaxy collection build

      - name: Publish to Ansible Galaxy
        run: |
          ansible-galaxy collection publish ivorynomad-onepassword-*.tar.gz --api-key="${{ secrets.GALAXY_API_KEY }}"

      - name: Upload collection artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-collection
          path: ivorynomad-onepassword-*.tar.gz
