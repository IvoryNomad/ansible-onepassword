name: CI

# When to run this workflow
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:

# Set up permissions for the workflow
permissions:
  contents: read

jobs:
  # Job 1: Code quality and sanity checks
  sanity:
    name: Sanity Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ansible_collections/ivorynomad/onepassword

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.13.9
          pip install -r ansible_collections/ivorynomad/onepassword/requirements.txt

      - name: Run ansible-test sanity
        run: |
          cd ansible_collections/ivorynomad/onepassword
          ansible-test sanity --docker -v

  # Job 2: Unit tests
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }}, Ansible ${{ matrix.ansible-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        ansible-version: ['>=2.13.9', '>=2.14.0', '>=2.15.0']
        # Exclude combinations that don't work
        exclude:
          - python-version: '3.12'
            ansible-version: '>=2.13.9'  # Ansible 2.13 doesn't support Python 3.12

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "ansible-core${{ matrix.ansible-version }}"
          pip install -r requirements.txt
          pip install -r tests/requirements.txt

      - name: Run unit tests with pytest
        run: |
          # Add current directory to Python path for imports
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          pytest tests/unit/ -v --cov=plugins --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        if: matrix.python-version == '3.10' && matrix.ansible-version == '>=2.14.0'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Integration tests  
  integration-tests:
    name: Integration Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ansible_collections/ivorynomad/onepassword

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.13.9
          pip install -r ansible_collections/ivorynomad/onepassword/requirements.txt

      - name: Run integration tests
        run: |
          cd ansible_collections/ivorynomad/onepassword
          ansible-test integration --docker -v lookup_onepassword

  # Job 4: Build and validate collection
  build:
    name: Build Collection
    runs-on: ubuntu-latest
    needs: [sanity, unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install ansible-core
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.13.9

      - name: Build collection
        run: |
          ansible-galaxy collection build

      - name: Upload collection artifact
        uses: actions/upload-artifact@v3
        with:
          name: collection-tarball
          path: ivorynomad-onepassword-*.tar.gz

      - name: Validate built collection
        run: |
          # Install and test the built collection
          ansible-galaxy collection install ivorynomad-onepassword-*.tar.gz
          
          # Basic smoke test
          python -c "
          import sys
          sys.path.insert(0, '~/.ansible/collections/ansible_collections/ivorynomad/onepassword/plugins/lookup')
          try:
              import onepassword
              print('✓ Collection installed and plugin importable')
          except ImportError as e:
              print(f'✗ Failed to import plugin: {e}')
              sys.exit(1)
          "

  # Job 5: Lint and style checks
  lint:
    name: Lint and Style
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 yamllint ansible-lint

      - name: Run Black (Python formatting)
        run: |
          black --check --diff plugins/ tests/

      - name: Run flake8 (Python linting)
        run: |
          flake8 plugins/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run yamllint
        run: |
          yamllint .

      - name: Run ansible-lint
        run: |
          ansible-lint

  # Job 6: Security scanning (optional but recommended)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r plugins/ -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Check dependencies for security issues
        run: |
          pip install -r requirements.txt
          safety check
